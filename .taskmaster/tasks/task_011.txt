# Task ID: 11
# Title: Develop Comments System
# Status: done
# Dependencies: 7, 8
# Priority: medium
# Description: Create a commenting system for leads with mock user data.
# Details:
Design a comment input interface with rich text support using a library like Quill or TinyMCE. Implement comment threading with replies. Add user avatars and timestamps. Use optimistic updates for better UX. Implement edit and delete functionality for comments.

# Test Strategy:
Test comment creation, editing, and deletion. Verify proper threading of replies. Test rich text formatting. Check optimistic updates and error handling.

# Subtasks:
## 1. Set up comment data structure and API mock [done]
### Dependencies: None
### Description: Define the data structure for comments including fields for content, author, timestamps, and threading relationships. Create mock API endpoints for CRUD operations.
### Details:
Create TypeScript interfaces for Comment and CommentThread. Include fields for id, content (rich text), authorId, createdAt, updatedAt, parentId (for replies), and leadId. Implement mock API functions using the existing mock data structure that simulate fetching, creating, updating, and deleting comments.

## 2. Integrate rich text editor component [done]
### Dependencies: 11.1
### Description: Select and integrate a rich text editor library (Quill or TinyMCE) for the comment input interface.
### Details:
Install the chosen rich text library (recommend Quill for its lightweight nature). Create a CommentEditor component that wraps the rich text editor with appropriate configuration for basic formatting options (bold, italic, bullet points, links). Implement value binding to form state and handle content changes.

## 3. Implement comment creation functionality [done]
### Dependencies: 11.1, 11.2
### Description: Create the UI and logic for users to add new comments to leads.
### Details:
Develop a CommentForm component that includes the rich text editor and a submit button. Implement form validation to ensure comments aren't empty. Connect to the mock API to save new comments. Add optimistic updates to immediately display the new comment while the API request is processing.

## 4. Develop comment display component with threading [done]
### Dependencies: 11.1
### Description: Create a component to display comments with proper threading for replies.
### Details:
Build a CommentList and CommentItem component structure. Implement recursive rendering for threaded replies. Display user avatars fetched from mock user data. Show formatted timestamps using a library like date-fns. Include proper indentation and visual cues for reply threads.

## 5. Add reply functionality to comments [done]
### Dependencies: 11.3, 11.4
### Description: Implement the ability for users to reply to existing comments.
### Details:
Add a 'Reply' button to each comment. When clicked, show a CommentForm component below the parent comment. Modify the comment creation logic to handle parent-child relationships. Update the comment thread display to show new replies with proper nesting.

## 6. Implement edit functionality for comments [done]
### Dependencies: 11.3, 11.4
### Description: Allow users to edit their own comments with proper UI feedback.
### Details:
Add an 'Edit' button to comments. When clicked, replace the comment display with the CommentEditor pre-filled with existing content. Implement save and cancel actions. Update the comment in the UI optimistically while the API request processes. Show an 'edited' indicator on modified comments.

## 7. Implement delete functionality for comments [done]
### Dependencies: 11.4
### Description: Enable users to delete their comments with confirmation and proper UI updates.
### Details:
Add a 'Delete' button to comments. Show a confirmation dialog before deletion. Implement soft deletion in the UI (optimistic update) while the API request processes. Handle deletion of parent comments by either removing all child comments or keeping them with a 'deleted' placeholder.

## 8. Integrate comments system with lead detail view [done]
### Dependencies: 11.4, 11.5, 11.6, 11.7
### Description: Connect the comments system to the lead detail view and implement loading states and error handling.
### Details:
Add the comments section to the lead detail view. Implement loading states for initial comment fetching. Add error handling for failed API requests with retry options. Ensure comments are refreshed when returning to a lead detail view. Add a comment count indicator to the lead card component.

