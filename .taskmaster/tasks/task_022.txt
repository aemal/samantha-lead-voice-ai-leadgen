# Task ID: 22
# Title: Create Supabase PostgreSQL Migration File for Lead Comments Table
# Status: pending
# Dependencies: 16, 17, 18, 11
# Priority: high
# Description: Develop a SQL migration file for the lead_comments table with all required columns, appropriate data types, constraints, and performance-optimized indexes.
# Details:
Create a Supabase migration file in the project's migration directory with the following specifications:

1. Define the lead_comments table with these columns:
   - id (UUID, primary key, default to gen_random_uuid())
   - lead_id (UUID, not null, foreign key to leads.id)
   - user_id (UUID, not null, foreign key to auth.users)
   - comment_text (TEXT, not null)
   - is_internal (BOOLEAN, not null, default to false)
   - created_at (TIMESTAMP with time zone, not null, default to now())
   - updated_at (TIMESTAMP with time zone, not null, default to now())
   - parent_comment_id (UUID, nullable, self-referencing foreign key to lead_comments.id)

2. Add foreign key constraints:
   ```sql
   ALTER TABLE lead_comments ADD CONSTRAINT fk_lead_comments_lead_id FOREIGN KEY (lead_id) REFERENCES leads(id) ON DELETE CASCADE;
   ALTER TABLE lead_comments ADD CONSTRAINT fk_lead_comments_user_id FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;
   ALTER TABLE lead_comments ADD CONSTRAINT fk_lead_comments_parent_id FOREIGN KEY (parent_comment_id) REFERENCES lead_comments(id) ON DELETE SET NULL;
   ```

3. Create indexes for performance optimization:
   ```sql
   CREATE INDEX idx_lead_comments_lead_id ON lead_comments(lead_id);
   CREATE INDEX idx_lead_comments_user_id ON lead_comments(user_id);
   CREATE INDEX idx_lead_comments_parent_id ON lead_comments(parent_comment_id);
   CREATE INDEX idx_lead_comments_created_at ON lead_comments(created_at);
   ```

4. Implement Row Level Security (RLS) policies:
   ```sql
   -- Enable RLS on the table
   ALTER TABLE lead_comments ENABLE ROW LEVEL SECURITY;

   -- Create policy for viewing comments
   CREATE POLICY "Users can view all comments they have access to" ON lead_comments
   FOR SELECT USING (
     -- Allow users to see comments they created
     auth.uid() = user_id
     -- Allow users to see non-internal comments
     OR is_internal = false
     -- Allow users with admin role to see all comments
     OR EXISTS (
       SELECT 1 FROM user_profiles
       WHERE user_profiles.id = auth.uid() AND role = 'admin'
     )
   );

   -- Create policy for inserting comments
   CREATE POLICY "Users can insert their own comments" ON lead_comments
   FOR INSERT WITH CHECK (auth.uid() = user_id);

   -- Create policy for updating comments
   CREATE POLICY "Users can update their own comments" ON lead_comments
   FOR UPDATE USING (auth.uid() = user_id)
   WITH CHECK (auth.uid() = user_id);

   -- Create policy for deleting comments
   CREATE POLICY "Users can delete their own comments" ON lead_comments
   FOR DELETE USING (auth.uid() = user_id);
   ```

5. Create a trigger to automatically update the updated_at timestamp:
   ```sql
   CREATE OR REPLACE FUNCTION update_lead_comments_updated_at()
   RETURNS TRIGGER AS $$
   BEGIN
     NEW.updated_at = now();
     RETURN NEW;
   END;
   $$ LANGUAGE plpgsql;

   CREATE TRIGGER set_lead_comments_updated_at
   BEFORE UPDATE ON lead_comments
   FOR EACH ROW
   EXECUTE FUNCTION update_lead_comments_updated_at();
   ```

6. Add the migration file to the project's migration directory with an appropriate timestamp and name:
   ```
   supabase/migrations/[timestamp]_create_lead_comments_table.sql
   ```

# Test Strategy:
1. Run the migration in a development environment and verify successful execution without errors:
   ```bash
   npx supabase migration up
   ```

2. Validate the table structure using Supabase Table Editor or psql:
   ```sql
   \d+ lead_comments
   ```

3. Test the foreign key constraints by:
   - Inserting a comment with a non-existent lead_id (should fail)
   - Inserting a comment with a non-existent user_id (should fail)
   - Inserting a comment with a non-existent parent_comment_id (should fail)
   - Deleting a lead and verifying its comments are cascaded (should succeed)

4. Test the RLS policies by:
   - Creating a test user with a non-admin role and verifying they can only see their own comments and non-internal comments
   - Creating a test user with an admin role and verifying they can see all comments
   - Verifying users can only update and delete their own comments

5. Test the updated_at trigger by:
   - Inserting a new comment and verifying created_at and updated_at are set
   - Updating a comment and verifying updated_at changes while created_at remains the same

6. Test threading functionality by:
   - Creating parent comments
   - Creating child comments with parent_comment_id references
   - Verifying the relationship is maintained correctly

7. Test performance with a significant volume of test data:
   - Insert 1000+ test comments
   - Run query performance tests to ensure indexes are working correctly
