# Task ID: 26
# Title: Create Next.js API Routes for Supabase CRUD Operations
# Status: pending
# Dependencies: 16, 17, 18, 20, 21
# Priority: high
# Description: Develop API routes in Next.js for server-side CRUD operations with Supabase client integration for leads, phone calls, emails, evaluations, and comments with proper error handling, validation, and authentication middleware.
# Details:
Implement Next.js API routes in the app/api directory following these steps:

1. Create a structured API route hierarchy:
   ```
   app/api/
   ├── leads/
   │   ├── route.ts (GET, POST)
   │   └── [id]/
   │       ├── route.ts (GET, PUT, DELETE)
   │       ├── calls/route.ts
   │       ├── emails/route.ts
   │       ├── evaluations/route.ts
   │       └── comments/route.ts
   ├── calls/route.ts
   ├── emails/route.ts
   ├── evaluations/route.ts
   └── comments/route.ts
   ```

2. Implement a middleware layer for authentication:
   ```typescript
   // app/api/middleware.ts
   import { NextRequest, NextResponse } from 'next/server';
   import { createClient } from '@supabase/supabase-js';

   export async function withAuth(
     req: NextRequest,
     handler: (req: NextRequest, supabase: any) => Promise<NextResponse>
   ) {
     // Initialize Supabase client
     const supabase = createClient(
       process.env.NEXT_PUBLIC_SUPABASE_URL!,
       process.env.SUPABASE_SERVICE_ROLE_KEY!
     );
     
     // Get JWT from request
     const authHeader = req.headers.get('authorization');
     if (!authHeader || !authHeader.startsWith('Bearer ')) {
       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
     }
     
     const token = authHeader.split(' ')[1];
     
     // Verify the token
     const { data: { user }, error } = await supabase.auth.getUser(token);
     
     if (error || !user) {
       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
     }
     
     // Call the handler with authenticated request
     return handler(req, supabase);
   }
   ```

3. Create a validation utility using zod:
   ```typescript
   // app/api/validation.ts
   import { z } from 'zod';
   import { NextRequest, NextResponse } from 'next/server';

   export async function validateRequest<T>(
     req: NextRequest,
     schema: z.ZodType<T>
   ): Promise<{ data: T; error: null } | { data: null; error: NextResponse }> {
     try {
       const body = await req.json();
       const data = schema.parse(body);
       return { data, error: null };
     } catch (error) {
       return {
         data: null,
         error: NextResponse.json(
           { error: 'Validation error', details: error },
           { status: 400 }
         )
       };
     }
   }
   ```

4. Define validation schemas for each entity:
   ```typescript
   // app/api/schemas.ts
   import { z } from 'zod';

   export const leadSchema = z.object({
     name: z.string().min(1),
     email: z.string().email(),
     phone: z.string().optional(),
     status: z.enum(['lead', 'qualified', 'disqualified', 'appointment_booked']),
     source: z.string().optional()
   });

   export const callSchema = z.object({
     lead_id: z.string().uuid(),
     call_type: z.enum(['outbound', 'inbound']),
     duration: z.number().int().min(0),
     notes: z.string().optional(),
     outcome: z.string().optional()
   });

   // Similar schemas for emails, evaluations, and comments
   ```

5. Implement the leads API routes:
   ```typescript
   // app/api/leads/route.ts
   import { NextRequest, NextResponse } from 'next/server';
   import { withAuth } from '../middleware';
   import { validateRequest } from '../validation';
   import { leadSchema } from '../schemas';

   export async function GET(req: NextRequest) {
     return withAuth(req, async (req, supabase) => {
       const { data, error } = await supabase
         .from('leads')
         .select('*');
       
       if (error) {
         return NextResponse.json({ error: error.message }, { status: 500 });
       }
       
       return NextResponse.json(data);
     });
   }

   export async function POST(req: NextRequest) {
     return withAuth(req, async (req, supabase) => {
       const validation = await validateRequest(req, leadSchema);
       
       if (validation.error) {
         return validation.error;
       }
       
       const { data, error } = await supabase
         .from('leads')
         .insert(validation.data)
         .select();
       
       if (error) {
         return NextResponse.json({ error: error.message }, { status: 500 });
       }
       
       return NextResponse.json(data[0], { status: 201 });
     });
   }
   ```

6. Implement the single lead API routes:
   ```typescript
   // app/api/leads/[id]/route.ts
   import { NextRequest, NextResponse } from 'next/server';
   import { withAuth } from '../../middleware';
   import { validateRequest } from '../../validation';
   import { leadSchema } from '../../schemas';

   export async function GET(
     req: NextRequest,
     { params }: { params: { id: string } }
   ) {
     return withAuth(req, async (req, supabase) => {
       const { data, error } = await supabase
         .from('leads')
         .select('*')
         .eq('id', params.id)
         .single();
       
       if (error) {
         if (error.code === 'PGRST116') {
           return NextResponse.json({ error: 'Lead not found' }, { status: 404 });
         }
         return NextResponse.json({ error: error.message }, { status: 500 });
       }
       
       return NextResponse.json(data);
     });
   }

   export async function PUT(
     req: NextRequest,
     { params }: { params: { id: string } }
   ) {
     return withAuth(req, async (req, supabase) => {
       const validation = await validateRequest(req, leadSchema.partial());
       
       if (validation.error) {
         return validation.error;
       }
       
       const { data, error } = await supabase
         .from('leads')
         .update(validation.data)
         .eq('id', params.id)
         .select();
       
       if (error) {
         return NextResponse.json({ error: error.message }, { status: 500 });
       }
       
       if (data.length === 0) {
         return NextResponse.json({ error: 'Lead not found' }, { status: 404 });
       }
       
       return NextResponse.json(data[0]);
     });
   }

   export async function DELETE(
     req: NextRequest,
     { params }: { params: { id: string } }
   ) {
     return withAuth(req, async (req, supabase) => {
       const { error } = await supabase
         .from('leads')
         .delete()
         .eq('id', params.id);
       
       if (error) {
         return NextResponse.json({ error: error.message }, { status: 500 });
       }
       
       return NextResponse.json({}, { status: 204 });
     });
   }
   ```

7. Implement similar patterns for other entities (calls, emails, evaluations, comments).

8. Add error handling utilities:
   ```typescript
   // app/api/error.ts
   import { NextResponse } from 'next/server';

   export function handleDatabaseError(error: any) {
     console.error('Database error:', error);
     
     // Handle specific Postgres error codes
     if (error.code === '23505') {
       return NextResponse.json(
         { error: 'Duplicate record', details: error.details },
         { status: 409 }
       );
     }
     
     if (error.code === '23503') {
       return NextResponse.json(
         { error: 'Foreign key violation', details: error.details },
         { status: 400 }
       );
     }
     
     return NextResponse.json(
       { error: 'Database error', message: error.message },
       { status: 500 }
     );
   }
   ```

9. Implement rate limiting middleware to prevent abuse:
   ```typescript
   // app/api/rate-limit.ts
   import { NextRequest, NextResponse } from 'next/server';
   import { Redis } from '@upstash/redis';

   const redis = Redis.fromEnv();
   const WINDOW_SIZE = 60; // 1 minute
   const MAX_REQUESTS = 100; // per minute

   export async function withRateLimit(
     req: NextRequest,
     handler: (req: NextRequest) => Promise<NextResponse>
   ) {
     const ip = req.headers.get('x-forwarded-for') || 'unknown';
     const key = `rate-limit:${ip}`;
     
     const requests = await redis.incr(key);
     if (requests === 1) {
       await redis.expire(key, WINDOW_SIZE);
     }
     
     if (requests > MAX_REQUESTS) {
       return NextResponse.json(
         { error: 'Too many requests' },
         { status: 429 }
       );
     }
     
     return handler(req);
   }
   ```

10. Implement proper logging for API requests:
    ```typescript
    // app/api/logger.ts
    import { NextRequest, NextResponse } from 'next/server';

    export async function withLogging(
      req: NextRequest,
      handler: (req: NextRequest) => Promise<NextResponse>
    ) {
      const start = Date.now();
      const method = req.method;
      const url = req.url;
      
      console.log(`[${method}] ${url} - Request received`);
      
      try {
        const response = await handler(req);
        const duration = Date.now() - start;
        
        console.log(`[${method}] ${url} - ${response.status} (${duration}ms)`);
        
        return response;
      } catch (error) {
        console.error(`[${method}] ${url} - Error:`, error);
        throw error;
      }
    }
    ```

# Test Strategy:
1. Unit Testing:
   - Create Jest tests for each API route using Next.js testing utilities
   - Mock the Supabase client responses for predictable test outcomes
   - Test validation logic with valid and invalid payloads
   - Verify error handling for various error scenarios
   - Test authentication middleware with valid and invalid tokens

   ```typescript
   // Example unit test for leads POST endpoint
   import { POST } from '@/app/api/leads/route';
   import { createMocks } from 'node-mocks-http';
   
   jest.mock('@supabase/supabase-js', () => ({
     createClient: jest.fn(() => ({
       auth: {
         getUser: jest.fn().mockResolvedValue({ data: { user: { id: 'test-user' } }, error: null })
       },
       from: jest.fn().mockReturnValue({
         insert: jest.fn().mockReturnThis(),
         select: jest.fn().mockResolvedValue({ data: [{ id: 'new-id', name: 'Test Lead' }], error: null })
       })
     }))
   }));
   
   describe('POST /api/leads', () => {
     it('should create a new lead with valid data', async () => {
       const { req, res } = createMocks({
         method: 'POST',
         headers: { authorization: 'Bearer valid-token' },
         body: {
           name: 'Test Lead',
           email: 'test@example.com',
           status: 'lead'
         }
       });
       
       await POST(req, res);
       
       expect(res._getStatusCode()).toBe(201);
       expect(JSON.parse(res._getData())).toHaveProperty('id', 'new-id');
     });
   });
   ```

2. Integration Testing:
   - Set up a test Supabase project for integration tests
   - Create test fixtures to populate the database with test data
   - Test complete request/response cycles for each endpoint
   - Verify database state changes after API operations
   - Test relationships between entities (e.g., retrieving a lead's calls)

   ```typescript
   // Example integration test setup
   import { createClient } from '@supabase/supabase-js';
   import { setupServer } from 'msw/node';
   import { rest } from 'msw';
   
   const supabase = createClient(
     process.env.TEST_SUPABASE_URL!,
     process.env.TEST_SUPABASE_ANON_KEY!
   );
   
   beforeAll(async () => {
     // Clear test database and insert test data
     await supabase.from('leads').delete().neq('id', '00000000-0000-0000-0000-000000000000');
     await supabase.from('leads').insert([
       { id: 'test-lead-id', name: 'Test Lead', email: 'test@example.com', status: 'lead' }
     ]);
   });
   ```

3. API Testing:
   - Use tools like Postman or Insomnia to create a collection of API tests
   - Test each endpoint with various parameters and payloads
   - Verify response status codes, headers, and body content
   - Create environment variables for different testing scenarios
   - Export the collection for CI/CD integration

4. Security Testing:
   - Test authentication by attempting to access endpoints without valid tokens
   - Verify that rate limiting prevents excessive requests
   - Test for SQL injection vulnerabilities using malicious input
   - Verify that sensitive data is not exposed in responses
   - Test CORS configuration for browser security

5. Performance Testing:
   - Use tools like k6 or Apache JMeter to simulate high load
   - Measure response times under various load conditions
   - Identify bottlenecks in the API implementation
   - Test database query performance with larger datasets
   - Verify that rate limiting effectively manages traffic spikes

6. End-to-End Testing:
   - Create Cypress tests that interact with the frontend and verify API integration
   - Test complete user flows that involve multiple API calls
   - Verify that UI components correctly display API response data
   - Test error handling and loading states in the UI
   - Simulate network conditions to test resilience

7. Documentation Testing:
   - Verify that API documentation accurately reflects the implemented endpoints
   - Test example requests and responses in the documentation
   - Ensure that error responses are properly documented
   - Verify that authentication requirements are clearly specified
