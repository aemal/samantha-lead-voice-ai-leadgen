{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Next.js 15.4 Project with App Router",
        "description": "Set up a new Next.js 15.4 project with App Router, integrating Tailwind CSS, Hero UI, and Lucide Icons.",
        "details": "Use create-next-app to initialize the project. Configure Tailwind CSS using the official Next.js integration. Install and set up Hero UI (Headless UI) for accessible components. Add Lucide Icons for consistent iconography. Ensure proper TypeScript configuration.",
        "testStrategy": "Verify successful project creation and component rendering. Run lighthouse tests for initial performance and accessibility scores.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create Comprehensive Mock Data Structure",
        "description": "Develop a detailed mock data JSON file with sample leads, phone calls, emails, and evaluations.",
        "details": "Create a mock.json file in the project root. Include at least 20 sample leads with varying statuses, 50 phone calls, 100 emails, and 30 evaluations. Ensure data consistency across related entities. Use realistic names, email addresses, and phone numbers. Implement using TypeScript interfaces for type safety.",
        "testStrategy": "Validate JSON structure using a JSON schema. Write unit tests to ensure data integrity and relationships between entities.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement Basic Kanban Layout",
        "description": "Create a responsive kanban board layout with three columns: Leads, Qualified, and Disqualified.",
        "details": "Use Tailwind CSS grid and flexbox for layout. Implement responsive design for mobile, tablet, and desktop views. Create reusable column components. Use Next.js 15.4 App Router for routing. Implement column headers with lead counts.",
        "testStrategy": "Test responsiveness across different screen sizes. Ensure accessibility with keyboard navigation. Verify correct lead count display.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Develop Lead Card Component",
        "description": "Create a reusable lead card component displaying essential lead information.",
        "details": "Design a compact card using Tailwind CSS and Hero UI. Display name, email, phone, status, and priority. Add visual indicators for communication history. Use Lucide Icons for status badges. Implement hover effects and focus states for accessibility.",
        "testStrategy": "Unit test the component with various lead data. Verify correct display of all information. Test accessibility using axe-core.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Drag and Drop Functionality",
        "description": "Add drag and drop capability to move lead cards between kanban columns.",
        "details": "Integrate @dnd-kit library for modern React 18+ compatibility. Implement drag sources on lead cards and drop targets on columns. Add visual feedback during drag operations. Handle state updates on successful drops. Implement touch support for mobile devices.",
        "testStrategy": "Write integration tests for drag and drop operations. Test on various devices and browsers. Verify state updates after drag operations.",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create 'Add New Lead' Form",
        "description": "Develop a form interface for manually adding new leads to the system.",
        "details": "Use Hero UI form components for consistency. Implement form validation using react-hook-form or Formik. Include fields for name, email, phone, status, source, and notes. Add a modal or slide-over component for form display. Use Tailwind CSS for styling.",
        "testStrategy": "Unit test form validation logic. Test form submission with various input combinations. Verify proper error handling and success feedback.",
        "priority": "medium",
        "dependencies": [
          2,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Lead Details Drawer/Modal",
        "description": "Create a detailed view for individual leads with all associated information.",
        "details": "Develop a drawer or modal component using Hero UI. Create tabs for different sections: Details, Calls, Emails, Evaluations. Implement scrollable content areas. Display full lead profile, communication history, and evaluation results. Add edit and delete options.",
        "testStrategy": "Test drawer/modal opening and closing. Verify correct display of all lead information. Test tab switching and content scrolling. Ensure keyboard accessibility.",
        "priority": "high",
        "dependencies": [
          2,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Mock Data State Management",
        "description": "Set up a state management system for handling mock data and CRUD operations.",
        "details": "Use React Context API for global state management. Create separate contexts for leads, calls, emails, and evaluations. Implement reducer functions for CRUD operations. Use TypeScript for type safety. Optimize performance with useMemo and useCallback hooks.",
        "testStrategy": "Write unit tests for reducer functions. Test state updates for all CRUD operations. Verify context provider wrapping and proper state distribution.",
        "priority": "high",
        "dependencies": [
          2,
          5,
          6,
          7
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Add Search and Filtering Capabilities",
        "description": "Implement search functionality and filtering options for leads.",
        "details": "Create a search input component with debounce functionality. Implement filtering by status, priority, and date range. Use efficient search algorithms for large datasets. Add clear filter options. Update URL parameters for shareable filtered views.",
        "testStrategy": "Test search with various queries. Verify correct filtering across multiple criteria. Check performance with large datasets. Test URL parameter handling.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          8
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Sorting Options",
        "description": "Add sorting functionality for leads by date, priority, name, and status.",
        "details": "Create a sorting dropdown component. Implement sorting logic in the state management system. Use efficient sorting algorithms. Add visual indicators for current sort order. Persist sort preferences in local storage.",
        "testStrategy": "Test sorting for each available option. Verify correct order after sorting. Check performance with large datasets. Test sort preference persistence across page reloads.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          8
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Develop Comments System",
        "description": "Create a commenting system for leads with mock user data.",
        "details": "Design a comment input interface with rich text support using a library like Quill or TinyMCE. Implement comment threading with replies. Add user avatars and timestamps. Use optimistic updates for better UX. Implement edit and delete functionality for comments.",
        "testStrategy": "Test comment creation, editing, and deletion. Verify proper threading of replies. Test rich text formatting. Check optimistic updates and error handling.",
        "priority": "medium",
        "dependencies": [
          7,
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up comment data structure and API mock",
            "description": "Define the data structure for comments including fields for content, author, timestamps, and threading relationships. Create mock API endpoints for CRUD operations.",
            "dependencies": [],
            "details": "Create TypeScript interfaces for Comment and CommentThread. Include fields for id, content (rich text), authorId, createdAt, updatedAt, parentId (for replies), and leadId. Implement mock API functions using the existing mock data structure that simulate fetching, creating, updating, and deleting comments.",
            "status": "done",
            "testStrategy": "Write unit tests to verify the data structure integrity and API mock functionality."
          },
          {
            "id": 2,
            "title": "Integrate rich text editor component",
            "description": "Select and integrate a rich text editor library (Quill or TinyMCE) for the comment input interface.",
            "dependencies": [
              "11.1"
            ],
            "details": "Install the chosen rich text library (recommend Quill for its lightweight nature). Create a CommentEditor component that wraps the rich text editor with appropriate configuration for basic formatting options (bold, italic, bullet points, links). Implement value binding to form state and handle content changes.",
            "status": "done",
            "testStrategy": "Test the editor initialization, content changes, and form submission with formatted content."
          },
          {
            "id": 3,
            "title": "Implement comment creation functionality",
            "description": "Create the UI and logic for users to add new comments to leads.",
            "dependencies": [
              "11.1",
              "11.2"
            ],
            "details": "Develop a CommentForm component that includes the rich text editor and a submit button. Implement form validation to ensure comments aren't empty. Connect to the mock API to save new comments. Add optimistic updates to immediately display the new comment while the API request is processing.",
            "status": "done",
            "testStrategy": "Test comment submission with various input types, validation behavior, and optimistic update rendering."
          },
          {
            "id": 4,
            "title": "Develop comment display component with threading",
            "description": "Create a component to display comments with proper threading for replies.",
            "dependencies": [
              "11.1"
            ],
            "details": "Build a CommentList and CommentItem component structure. Implement recursive rendering for threaded replies. Display user avatars fetched from mock user data. Show formatted timestamps using a library like date-fns. Include proper indentation and visual cues for reply threads.",
            "status": "done",
            "testStrategy": "Test rendering of comments at various nesting levels. Verify proper display of user information and timestamps."
          },
          {
            "id": 5,
            "title": "Add reply functionality to comments",
            "description": "Implement the ability for users to reply to existing comments.",
            "dependencies": [
              "11.3",
              "11.4"
            ],
            "details": "Add a 'Reply' button to each comment. When clicked, show a CommentForm component below the parent comment. Modify the comment creation logic to handle parent-child relationships. Update the comment thread display to show new replies with proper nesting.",
            "status": "done",
            "testStrategy": "Test the reply UI flow, verify correct parent-child relationships in the data, and check proper threading display after submission."
          },
          {
            "id": 6,
            "title": "Implement edit functionality for comments",
            "description": "Allow users to edit their own comments with proper UI feedback.",
            "dependencies": [
              "11.3",
              "11.4"
            ],
            "details": "Add an 'Edit' button to comments. When clicked, replace the comment display with the CommentEditor pre-filled with existing content. Implement save and cancel actions. Update the comment in the UI optimistically while the API request processes. Show an 'edited' indicator on modified comments.",
            "status": "done",
            "testStrategy": "Test the edit flow including cancellation. Verify optimistic updates and proper error handling if the update fails."
          },
          {
            "id": 7,
            "title": "Implement delete functionality for comments",
            "description": "Enable users to delete their comments with confirmation and proper UI updates.",
            "dependencies": [
              "11.4"
            ],
            "details": "Add a 'Delete' button to comments. Show a confirmation dialog before deletion. Implement soft deletion in the UI (optimistic update) while the API request processes. Handle deletion of parent comments by either removing all child comments or keeping them with a 'deleted' placeholder.",
            "status": "done",
            "testStrategy": "Test deletion flow including confirmation dialog. Verify proper handling of threaded comments when a parent is deleted."
          },
          {
            "id": 8,
            "title": "Integrate comments system with lead detail view",
            "description": "Connect the comments system to the lead detail view and implement loading states and error handling.",
            "dependencies": [
              "11.4",
              "11.5",
              "11.6",
              "11.7"
            ],
            "details": "Add the comments section to the lead detail view. Implement loading states for initial comment fetching. Add error handling for failed API requests with retry options. Ensure comments are refreshed when returning to a lead detail view. Add a comment count indicator to the lead card component.",
            "status": "done",
            "testStrategy": "Test integration with the lead detail view. Verify loading states, error handling, and proper refresh of comments when navigating between leads."
          }
        ]
      },
      {
        "id": 16,
        "title": "Set Up Supabase Project and Database",
        "description": "Initialize a Supabase project and configure the PostgreSQL database schema.",
        "details": "Create a new Supabase project. Set up database tables for leads, phone_calls, lead_emails, lead_evaluations, lead_comments, and user_profiles as per the PRD schema. Configure proper indexes and foreign key relationships. Set up row-level security policies.",
        "testStrategy": "Verify table creation and relationships. Test data insertion and retrieval. Check row-level security policy effectiveness. Perform basic CRUD operations to ensure schema correctness.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Implement Supabase Authentication",
        "description": "Integrate Supabase Auth for user management and session handling.",
        "details": "Set up Supabase Auth in the Next.js application. Implement sign up, login, and logout functionality. Create protected routes using Next.js middleware. Handle session persistence and refresh. Implement role-based access control using Supabase policies.",
        "testStrategy": "Test user registration and login flows. Verify session handling and persistence. Check protected route access with different user roles. Test token refresh and logout functionality.",
        "priority": "high",
        "dependencies": [
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Migrate Mock Data to Supabase",
        "description": "Transfer mock data from JSON to the Supabase PostgreSQL database.",
        "details": "Create a data migration script using Node.js and the Supabase JavaScript client. Ensure data integrity during migration. Handle potential conflicts or duplicates. Add proper error handling and logging. Create a rollback mechanism in case of migration failure.",
        "testStrategy": "Verify successful data migration for all entities. Check data integrity and relationships post-migration. Test rollback functionality. Ensure no data loss or corruption during the process.",
        "priority": "medium",
        "dependencies": [
          2,
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Refactor CRUD Operations to Use Supabase Client",
        "description": "Update all data operations to use the Supabase client instead of mock data.",
        "details": "Refactor the state management system to use Supabase queries. Implement optimistic updates for better UX. Handle offline scenarios and data syncing. Use Supabase real-time subscriptions for live updates. Ensure proper error handling for network issues.",
        "testStrategy": "Unit test all CRUD operations with Supabase client. Verify data consistency between client and server. Test offline functionality and data syncing. Check real-time update performance.",
        "priority": "high",
        "dependencies": [
          8,
          16,
          17,
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Implement Real-time Features",
        "description": "Add real-time updates for kanban board and lead details using Supabase subscriptions.",
        "details": "Set up Supabase real-time subscriptions for leads, calls, emails, and comments tables. Implement optimistic UI updates. Handle conflicts for concurrent edits. Add visual indicators for real-time changes. Implement reconnection logic for dropped connections.",
        "testStrategy": "Test real-time updates across multiple clients. Verify conflict resolution for concurrent edits. Check performance with a high number of real-time events. Test reconnection scenarios.",
        "priority": "medium",
        "dependencies": [
          5,
          7,
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Enhance Lead Details Interface",
        "description": "Improve the lead details view with real data and advanced features.",
        "details": "Refactor lead details component to use real Supabase data. Implement lazy loading for large datasets. Add inline editing capabilities for lead information. Implement version history for lead changes. Add data export functionality (CSV, PDF).",
        "testStrategy": "Test lazy loading performance with large datasets. Verify inline editing and change tracking. Check data export functionality for accuracy. Ensure responsive design on various screen sizes.",
        "priority": "medium",
        "dependencies": [
          7,
          19,
          20
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Implement Advanced Search and Filtering",
        "description": "Enhance search capabilities with full-text search and advanced filtering options.",
        "details": "Implement full-text search using Supabase's text search capabilities. Add advanced filtering options (date ranges, multiple statuses, tags). Implement saved searches functionality. Use debouncing for search input. Optimize query performance for large datasets.",
        "testStrategy": "Test full-text search accuracy and performance. Verify advanced filtering with multiple criteria. Check saved searches functionality. Measure query performance with large datasets.",
        "priority": "low",
        "dependencies": [
          9,
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Create Dashboard and Reporting Features",
        "description": "Develop a dashboard with key metrics and reporting capabilities.",
        "details": "Design a dashboard layout with key performance indicators. Implement charts and graphs using a library like Chart.js or D3.js. Add lead conversion funnel visualization. Create exportable reports (PDF, CSV). Implement date range selection for report generation.",
        "testStrategy": "Verify accuracy of displayed metrics and charts. Test report generation and export functionality. Check responsiveness of dashboard layout. Ensure real-time updates of dashboard data.",
        "priority": "low",
        "dependencies": [
          19,
          20
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement Webhook Endpoint for n8n Integration",
        "description": "Create a webhook endpoint to receive updates from the n8n voice AI workflow.",
        "details": "Develop a secure webhook endpoint using Next.js API routes. Implement authentication for incoming webhooks. Process incoming data and update relevant database tables. Handle. Handle potential errors and data inconsistencies. Implement logging for all webhook activities.",
        "testStrategy": "Test webhook endpoint with sample payloads. Verify proper authentication and data processing. Check error handling for various scenarios. Ensure proper logging of all webhook activities.",
        "priority": "medium",
        "dependencies": [
          16,
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Optimize Performance and Implement Monitoring",
        "description": "Enhance application performance and set up monitoring and analytics.",
        "details": "Implement code splitting and lazy loading for improved initial load times. Set up Vercel Analytics for performance monitoring. Implement error tracking using a service like Sentry. Optimize database queries and indexes. Set up automated performance testing using Lighthouse CI.",
        "testStrategy": "Measure and compare performance metrics before and after optimization. Verify error tracking functionality. Check monitoring dashboards for accuracy. Run Lighthouse CI tests and ensure passing scores.",
        "priority": "low",
        "dependencies": [
          19,
          20,
          21,
          22,
          23
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-21T14:46:32.667Z",
      "updated": "2025-07-21T19:11:36.975Z",
      "description": "Tasks for master context"
    }
  }
}